// Mocks generated by Mockito 5.4.0 from annotations
// in fyp_ezymemory/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:cloud_firestore/cloud_firestore.dart' as _i15;
import 'package:flutter/material.dart' as _i7;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i5;
import 'package:fyp_ezymemory/models/Deck/Deck.dart' as _i13;
import 'package:fyp_ezymemory/models/Flashcard/Flashcard.dart' as _i14;
import 'package:fyp_ezymemory/services/api_service.dart' as _i11;
import 'package:fyp_ezymemory/services/auth_service.dart' as _i10;
import 'package:fyp_ezymemory/services/firestore_service.dart' as _i12;
import 'package:fyp_ezymemory/services/logger_service.dart' as _i16;
import 'package:fyp_ezymemory/services/notification_service.dart' as _i20;
import 'package:fyp_ezymemory/services/point_service.dart' as _i19;
import 'package:fyp_ezymemory/services/sm2_service.dart' as _i17;
import 'package:fyp_ezymemory/services/spacedr_service.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i21;
import 'package:simple_logger/simple_logger.dart' as _i2;
import 'package:spaced_repetition/sm.dart' as _i3;
import 'package:spaced_repetition/SmResponse.dart' as _i4;
import 'package:stacked_services/stacked_services.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSimpleLogger_0 extends _i1.SmartFake implements _i2.SimpleLogger {
  _FakeSimpleLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSm_1 extends _i1.SmartFake implements _i3.Sm {
  _FakeSm_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSmResponse_2 extends _i1.SmartFake implements _i4.SmResponse {
  _FakeSmResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterLocalNotificationsPlugin_3 extends _i1.SmartFake
    implements _i5.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i6.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i7.GlobalKey<_i7.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i7.GlobalKey<_i7.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i6.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<T?>? navigateWithTransition<T>(
    _i7.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i7.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? replaceWithTransition<T>(
    _i7.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i7.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i7.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i7.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? navigateToView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i7.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i6.Transition? transition,
    _i6.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i7.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearStackAndShowView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? clearTillFirstAndShowView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
  @override
  _i8.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i7.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i8.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i6.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i6.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i6.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i8.Future<_i6.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i6.SheetResponse<dynamic>?>.value(),
      ) as _i8.Future<_i6.SheetResponse<dynamic>?>);
  @override
  _i8.Future<_i6.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i9.Color? barrierColor = const _i9.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i8.Future<_i6.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i6.SheetResponse<T>?>.value(),
      ) as _i8.Future<_i6.SheetResponse<T>?>);
  @override
  void completeSheet(_i6.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i6.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i6.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i7.Widget Function(
      _i7.BuildContext,
      _i6.DialogRequest<dynamic>,
      dynamic Function(_i6.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i6.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i9.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i9.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i6.DialogResponse<dynamic>?>);
  @override
  _i8.Future<_i6.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i9.Color? barrierColor = const _i9.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i8.Future<_i6.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i8.Future<_i6.DialogResponse<T>?>.value(),
      ) as _i8.Future<_i6.DialogResponse<T>?>);
  @override
  _i8.Future<_i6.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i9.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i9.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i8.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i8.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i8.Future<_i6.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i6.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i10.AuthService {
  @override
  String get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i8.Future<dynamic> loginWithEmail({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithEmail,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> signUpWithEmail({
    required String? email,
    required String? username,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmail,
          [],
          {
            #email: email,
            #username: username,
            #password: password,
          },
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> signOutUser() => (super.noSuchMethod(
        Invocation.method(
          #signOutUser,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getCurrentUserId() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserId,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i11.ApiService {}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i12.FirestoreService {
  @override
  String get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i8.Future<dynamic> createUser(
    String? username,
    String? email,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [
            username,
            email,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getUser(String? uid) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [uid],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getUserList() => (super.noSuchMethod(
        Invocation.method(
          #getUserList,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updatePoints(double? points) => (super.noSuchMethod(
        Invocation.method(
          #updatePoints,
          [points],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<bool> createDeck(
    String? deckName,
    String? category,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDeck,
          [
            deckName,
            category,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<dynamic> getDeckById(String? deckId) => (super.noSuchMethod(
        Invocation.method(
          #getDeckById,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getSharedDeckList() => (super.noSuchMethod(
        Invocation.method(
          #getSharedDeckList,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getUserDeckList() => (super.noSuchMethod(
        Invocation.method(
          #getUserDeckList,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> importUserDeck(_i13.Deck? importedDeck) =>
      (super.noSuchMethod(
        Invocation.method(
          #importUserDeck,
          [importedDeck],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateDeck(
    String? deckId,
    String? deckName,
    String? category,
    bool? isShared,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeck,
          [
            deckId,
            deckName,
            category,
            isShared,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateDeckLastFetchedTime(String? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDeckLastFetchedTime,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> deleteDeck(String? deckId) => (super.noSuchMethod(
        Invocation.method(
          #deleteDeck,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> calculateTimeDifference(String? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateTimeDifference,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> createFlashcard(
    String? deckId,
    String? front,
    String? back,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFlashcard,
          [
            deckId,
            front,
            back,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> createFlashcardByModel(
    String? deckId,
    _i14.Flashcard? flashcard,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFlashcardByModel,
          [
            deckId,
            flashcard,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getFlashcardListById(
    String? deckId, {
    int? freshLimit = 10,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFlashcardListById,
          [deckId],
          {#freshLimit: freshLimit},
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getFreshFlashcardListById(
    String? deckId, {
    int? freshLimit = 3,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFreshFlashcardListById,
          [deckId],
          {#freshLimit: freshLimit},
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> getFlashcardsCountByDeckId(String? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFlashcardsCountByDeckId,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> checkFreshFetch(String? deckId) => (super.noSuchMethod(
        Invocation.method(
          #checkFreshFetch,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateFlashcardById({
    required String? deckId,
    required String? flashcardId,
    int? interval = 0,
    int? repetitions = 0,
    double? easeFactor = 0.0,
    required _i15.Timestamp? reviewTime,
    String? status = r'review',
    bool? inUserStack = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFlashcardById,
          [],
          {
            #deckId: deckId,
            #flashcardId: flashcardId,
            #interval: interval,
            #repetitions: repetitions,
            #easeFactor: easeFactor,
            #reviewTime: reviewTime,
            #status: status,
            #inUserStack: inUserStack,
          },
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> checkFreshInUserStackCount(String? deckId) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkFreshInUserStackCount,
          [deckId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> uploadImg(dynamic badgeImg) => (super.noSuchMethod(
        Invocation.method(
          #uploadImg,
          [badgeImg],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<bool> createBadge(
    String? image,
    String? name,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBadge,
          [
            image,
            name,
            description,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<dynamic> getBadgeList() => (super.noSuchMethod(
        Invocation.method(
          #getBadgeList,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateBadge(
    String? badgeId,
    String? name,
    String? image,
    String? description,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBadge,
          [
            badgeId,
            name,
            image,
            description,
          ],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> deleteBadge(String? badgeId) => (super.noSuchMethod(
        Invocation.method(
          #deleteBadge,
          [badgeId],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i16.LoggerService {
  @override
  _i2.SimpleLogger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeSimpleLogger_0(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeSimpleLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.SimpleLogger);
  @override
  void setLoggerLevel() => super.noSuchMethod(
        Invocation.method(
          #setLoggerLevel,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void printInfo(
    dynamic header,
    dynamic message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #printInfo,
          [
            header,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void printWarning(dynamic message) => super.noSuchMethod(
        Invocation.method(
          #printWarning,
          [message],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void printShout(dynamic message) => super.noSuchMethod(
        Invocation.method(
          #printShout,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Sm2Service].
///
/// See the documentation for Mockito's code generation for more information.
class MockSm2Service extends _i1.Mock implements _i17.Sm2Service {
  @override
  _i3.Sm get sm => (super.noSuchMethod(
        Invocation.getter(#sm),
        returnValue: _FakeSm_1(
          this,
          Invocation.getter(#sm),
        ),
        returnValueForMissingStub: _FakeSm_1(
          this,
          Invocation.getter(#sm),
        ),
      ) as _i3.Sm);
  @override
  String get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.SmResponse calculateIRE(
    int? quality,
    int? repetitions,
    int? previousInterval,
    double? previousEaseFactor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateIRE,
          [
            quality,
            repetitions,
            previousInterval,
            previousEaseFactor,
          ],
        ),
        returnValue: _FakeSmResponse_2(
          this,
          Invocation.method(
            #calculateIRE,
            [
              quality,
              repetitions,
              previousInterval,
              previousEaseFactor,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeSmResponse_2(
          this,
          Invocation.method(
            #calculateIRE,
            [
              quality,
              repetitions,
              previousInterval,
              previousEaseFactor,
            ],
          ),
        ),
      ) as _i4.SmResponse);
}

/// A class which mocks [SpacedrService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpacedrService extends _i1.Mock implements _i18.SpacedrService {
  @override
  _i3.Sm get sm => (super.noSuchMethod(
        Invocation.getter(#sm),
        returnValue: _FakeSm_1(
          this,
          Invocation.getter(#sm),
        ),
        returnValueForMissingStub: _FakeSm_1(
          this,
          Invocation.getter(#sm),
        ),
      ) as _i3.Sm);
  @override
  String get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i4.SmResponse calculateIRE(
    int? quality,
    int? repetitions,
    int? previousInterval,
    double? previousEaseFactor,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateIRE,
          [
            quality,
            repetitions,
            previousInterval,
            previousEaseFactor,
          ],
        ),
        returnValue: _FakeSmResponse_2(
          this,
          Invocation.method(
            #calculateIRE,
            [
              quality,
              repetitions,
              previousInterval,
              previousEaseFactor,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeSmResponse_2(
          this,
          Invocation.method(
            #calculateIRE,
            [
              quality,
              repetitions,
              previousInterval,
              previousEaseFactor,
            ],
          ),
        ),
      ) as _i4.SmResponse);
}

/// A class which mocks [PointService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPointService extends _i1.Mock implements _i19.PointService {
  @override
  List<String> get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);
  @override
  _i8.Future<dynamic> addPoints(int? activity) => (super.noSuchMethod(
        Invocation.method(
          #addPoints,
          [activity],
        ),
        returnValue: _i8.Future<dynamic>.value(),
        returnValueForMissingStub: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i20.NotificationService {
  @override
  _i5.FlutterLocalNotificationsPlugin get flutterLocalNotificationsPlugin =>
      (super.noSuchMethod(
        Invocation.getter(#flutterLocalNotificationsPlugin),
        returnValue: _FakeFlutterLocalNotificationsPlugin_3(
          this,
          Invocation.getter(#flutterLocalNotificationsPlugin),
        ),
        returnValueForMissingStub: _FakeFlutterLocalNotificationsPlugin_3(
          this,
          Invocation.getter(#flutterLocalNotificationsPlugin),
        ),
      ) as _i5.FlutterLocalNotificationsPlugin);
  @override
  set prefs(_i21.SharedPreferences? _prefs) => super.noSuchMethod(
        Invocation.setter(
          #prefs,
          _prefs,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> showNotifications({
    dynamic id,
    dynamic title,
    dynamic body,
    dynamic payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotifications,
          [],
          {
            #id: id,
            #title: title,
            #body: body,
            #payload: payload,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> showNotificationWithNoTitle() => (super.noSuchMethod(
        Invocation.method(
          #showNotificationWithNoTitle,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> schedulePeriodicNotifications({
    dynamic hour,
    dynamic minute,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #schedulePeriodicNotifications,
          [],
          {
            #hour: hour,
            #minute: minute,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> scheduleNotifications({
    dynamic id,
    dynamic title,
    dynamic body,
    dynamic time,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotifications,
          [],
          {
            #id: id,
            #title: title,
            #body: body,
            #time: time,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
